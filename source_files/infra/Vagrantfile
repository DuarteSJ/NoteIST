# -*- mode: ruby -*-
# vi: set ft=ruby :

ENV['VAGRANT_DEFAULT_PROVIDER'] = "virtualbox"

Vagrant.configure("2") do |config|
  config.ssh.insert_key = false
  config.vbguest.auto_update = false
  config.vm.box_check_update = false

  # Create multiple network interfaces
  # 1. Outside Network (Client)
  # 2. DMZ Network (App Server)
  # 3. Private Network (DB Server)
  
  # Network Interface Configuration
  DMZ_NET = "192.168.60.0/24"     # DMZ Network
  PRIVATE_NET = "192.168.50.0/24" # Private Network


  # Client (Outside Network)
  config.vm.define "client" do |client|
    client.vm.box = "ubuntu/focal64"
    client.vm.hostname = "client"
    
    client.vm.network "public_network"
    
    client.vm.provider "virtualbox" do |vb|
      vb.memory = "1024"
      vb.cpus = 1
    end

    # Shared folders
    if Vagrant::Util::Platform.windows?
      client.vm.synced_folder "scripts/", "/home/vagrant/scripts",
        owner: "vagrant", group: "vagrant",
        mount_options: ["dmode=775","fmode=755"]
      client.vm.synced_folder "client/", "/home/vagrant/client",
        owner: "vagrant", group: "vagrant",
        mount_options: ["dmode=775","fmode=755"]
    else
      client.vm.synced_folder "client/", "/home/vagrant/client",
        mount_options: ["dmode=775", "fmode=755"]
      client.vm.synced_folder "scripts/", "/home/vagrant/scripts",
        mount_options: ["dmode=775", "fmode=755"]
      client.vm.synced_folder "certs/", "/home/vagrant/certs",
        mount_options: ["dmode=775", "fmode=755"]
    end

    # Client security configuration
    #client.vm.provision "shell", path: "scripts/secure_client.sh"
  end


  # App Server (DMZ)
  config.vm.define "app-server" do |app|
    app.vm.box = "ubuntu/focal64"
    app.vm.hostname = "app-server"
    
    # DMZ Network Interface
    app.vm.network "private_network", 
      ip: "192.168.60.10", 
      virtualbox__intnet: "dmz-net"
    
    # Private Network Interface for DB Connection
    app.vm.network "private_network", 
      ip: "192.168.56.14", 
      virtualbox__intnet: "private-net"
    
    app.vm.provider "virtualbox" do |vb|
      vb.memory = "1024"
      vb.cpus = 2
    end

    # Shared folders
    if Vagrant::Util::Platform.windows?
      app.vm.synced_folder "scripts/", "/home/vagrant/scripts",
        owner: "vagrant", group: "vagrant",
        mount_options: ["dmode=775","fmode=755"]
      app.vm.synced_folder "app/", "/home/vagrant/app",
        owner: "vagrant", group: "vagrant",
        mount_options: ["dmode=775","fmode=755"]
    else
      app.vm.synced_folder "app/", "/home/vagrant/app",
        mount_options: ["dmode=775", "fmode=755"]
      app.vm.synced_folder "scripts/", "/home/vagrant/scripts",
        mount_options: ["dmode=775", "fmode=755"]
      app.vm.synced_folder "certs/", "/home/vagrant/certs",
        mount_options: ["dmode=775", "fmode=755"]
    end

    # App server security configuration
    app.vm.provision "shell", path: "scripts/secure_app_server.sh"
  end

  # Database Server (Private Network)
  config.vm.define "db-server" do |db|
    db.vm.box = "ubuntu/focal64"
    db.vm.hostname = "db-server"
    
    # Private Network Interface
    db.vm.network "private_network", 
      ip: "192.168.56.17", 
      virtualbox__intnet: "private-net"
    
    db.vm.provider "virtualbox" do |vb|
      vb.memory = "1024"
      vb.cpus = 1
    end

    # Shared folders
    if Vagrant::Util::Platform.windows?
      db.vm.synced_folder "scripts/", "/home/vagrant/scripts",
        owner: "vagrant", group: "vagrant",
        mount_options: ["dmode=775","fmode=755"]
      db.vm.synced_folder "mongo/", "/home/vagrant/mongo",
        owner: "vagrant", group: "vagrant",
        mount_options: ["dmode=775","fmode=755"]
    else
      db.vm.synced_folder "scripts/", "/home/vagrant/scripts",
        mount_options: ["dmode=775", "fmode=755"]
      db.vm.synced_folder "mongo/", "/home/vagrant/mongo",
        mount_options: ["dmode=775", "fmode=755"]
      db.vm.synced_folder "certs/", "/home/vagrant/certs",
        mount_options: ["dmode=775", "fmode=755"]
    end

    # Database server security configuration
    db.vm.provision "shell", path: "scripts/secure_db_server.sh"
  end
end